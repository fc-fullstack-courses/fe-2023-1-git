git init - створення локального git репозиторію

git status - описує поточний стан репозиторію

git add <ім'я_файлу> - індексує файл(-и) 

git commit - зробити коміт
git commit -m 'Commit message' - зробити коміт з заданим повідомленням

git commit --amend - локально випралвяє останній коміт
git commit --amend -m 'New message' - одразу даємо нову назву коміту
git comiit --amend --no-edit - без зміни назви коміту

git log - показати історію комітів
git log --pretty=
                 oneline
                 short
                 medium (за замовчанням)
                 full
                 fuller
                 режими деталізації історії комітіві
                 
git diff - показує зміни у файлах (які вже відслідковуються)
git diff --staged - показує зміни у індексованих файлах

git reflog - показує локальну історыю комітів з виправленями (амендами)

git restore <ім'я_файлу> - відкатити файл до збереженого стану
git restore --staged <ім'я_файлу> - відкатити індексацію файлу

git reset <id_коміту> - локально відмінити коміти до вказанного
git revert <id_коміту> - створює коміт зі змінами, протилежними змінам до вказаного комітуб (для комітів, яки ви завантажили на сервер)

git rm <ім'я_файлу> - видаляє файл та індексує його видалення
git rm --cached <ім'я_файлу> - каже що файл має стати невідслідкованим, не видаляє сам файл

Віддалені репозиторії

git remote - набір команд для робои з віддаленими репозиторіями

git remote add <псевдонім(origin)> <посилання_на_віддалений_репозиторій> - з'вязує локлаьний і віддалений репозиторій

git remote -v - подвитися список з'єднаних віддалених репозиторіїв

git push <псевдонім> <назва_гілки> - завантажує дані на віддалений репозиторій 

git clone <посилання_на_віддалений_репозиторій> [назва_папки_репозиторію] - завантажує віддалений репозиторій

git pull <псевдонім> <назва_гілки> - завантажує до локального репозиторія недістаючі коміти

Гілки

HEAD - вказівник, може вказувати на гілку (за замовчанням) або на коміт (стан "відірваної голови")
Гілка - вказівник на коміт

git branch - вивести списог гілок
git branch <ім'я> - створення гілки

git branch -m <нове_ім'я> - перейменування поточної локальної гілки
git branch -m <старе_ім'я> <нове_ім'я> - перейменування локальної гілки

git branch -d <гілка> - видаляє локальну гілку
git push <псевдонім> --delete <назва_гілки> - видаляє віддалену гілку

git checkout <гілка/коміт> - переность HEAD на вказану гілку / коміт
git switch <гілка> - переность HEAD на вказану гілку 

git merge <гілка> - переміщує гілку, на якій ви знаходитесь до гілки яку вказали

git merge --abort - відмінити злияння гілок (тільки якщо відбувся кофлікт)

Завдання:

створити новий репозиторій
додати гітігнор
створіть якийсь текстовий файл
зробіть коміт з ним
створіть нову гілку
перемкніться на нову гілку
створіть інший файл і зробіть коміт з ним
повернітсья на початкову гілку (main або master)
зілліть зміни з другої гілки до початкової
поверніться на 2 гілку
зробіть зміну у першому файлі і збережіть її.
перемкніться на першу гілку і зорбіть зміну у тому же файлі і тому же місці (але іншу)
знову злийте зміни з іншої гілки
роз'вяжіть конфлікт
    у файлі з конфліктом залиште або одну з версій тексту або обидві
    проіндексуйте цей файл
    зробіть коміт (назву можна не міняти)

для перевірки використовуйте 
git log --pretty=oneline --all --graph
